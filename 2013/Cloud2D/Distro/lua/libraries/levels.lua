--[[	© 2011-2012 CloudSixteen.com do not share, re-distribute or modify	this file without the permission of its owner(s).
	Conna Wiles (connawiles@gmail.com)--]]levels = {};levels.m_class = {};levels.m_class.__index = levels.m_class;levels.m_textures = {};-- Called when the level is loaded.function levels.m_class:OnLoad() end;-- Called when the level is unloaded.function levels.m_class:OnUnload() end;-- A function to load a level.function levels.Load(levelName)	levels.Unload();	camera.SetScale(1);	lighting.Init(Color(0.05, 0.05, 0.05, 1));		print("[Level] Loading level "..levelName..", please wait...");		local levelText = files.Read("levels/"..levelName..".lev");	local levelData = json.Decode(levelText);	local newIndexes = {};	local iNumBrushes = 0;	local iNumEntities = 0;	local iNumTextures = 0;		levels.m_textures = {};		for k, v in ipairs(levelData.textures) do		levels.m_textures[k] = v;		levels.m_textures[k].image = util.GetImage(v.image);		iNumTextures = iNumTextures + 1;	end;		for k, v in ipairs(levelData.brushes) do		local entity = entities.FromKeyValues(v.class, v.keyValues);			entity:SetAngle(v.angle);			entity:SetSize(v.width, v.height);			entity:SetPos(v.position);			entity:OnLoadLevel(v.data);		entity:Spawn();				newIndexes[v.entIndex] = entity:EntIndex();		iNumBrushes = iNumBrushes + 1;	end;		for k, v in ipairs(levelData.entities) do		local entity = entities.FromKeyValues(v.class, v.keyValues);			entity:SetAngle(v.angle);			entity:SetSize(v.width, v.height);			entity:SetPos(v.position);			entity:OnLoadLevel(v.data);		entity:Spawn();				newIndexes[v.entIndex] = entity:EntIndex();		iNumEntities = iNumEntities + 1;	end;		print("[Level] Loaded "..iNumEntities.." entities...");	print("[Level] Loaded "..iNumTextures.." textures...");	print("[Level] Loaded "..iNumBrushes.." brushes...");		levels.RestoreLinks(levelData.links, newIndexes, function(outputEntity, outputName, inputEntity, inputName, argString)		outputEntity:AddLink(			outputName, inputEntity, inputName, argString		);	end);		LEVEL = {};	LEVEL.m_sLevelName = levelName;		setmetatable(LEVEL, levels.m_class);		if (files.Exists("levels/"..levelName..".lua")) then		lua.Include("levels/"..levelName..".lua");	end;		levels.m_active = LEVEL;	levels.m_active:OnLoad();		if (LEVEL.m_shader and LEVEL.m_shader.vert and LEVEL.m_shader.frag) then		LEVEL.m_shader = Shader(LEVEL.m_shader.vert, LEVEL.m_shader.frag);		LEVEL.m_frameBuffer = FrameBuffer(display.GetW(), display.GetH());	end;		hooks.Call("LevelLoad", LEVEL);		print("[Level] Loaded level "..levelName..".");end;-- A function to restore a level's entity links.function levels.RestoreLinks(linkTable, newIndexes, Callback)	local iNumLinks = 0;	local iBrokenLinks = 0;		for k, v in ipairs(linkTable) do		if (newIndexes and newIndexes[tonumber(v.outputIndex)]) then			v.outputIndex = newIndexes[tonumber(v.outputIndex)];		end;				if (newIndexes and newIndexes[tonumber(v.inputIndex)]) then			v.inputIndex = newIndexes[tonumber(v.inputIndex)];		end;				local outputEntity = entities.GetByIndex(tonumber(v.outputIndex));		local inputEntity = (not tonumber(v.inputIndex) and v.inputIndex or entities.GetByIndex(tonumber(v.inputIndex)));				if (outputEntity and inputEntity) then			Callback(outputEntity, v.outputName, inputEntity, v.inputName, v.argString);			iNumLinks = iNumLinks + 1;		else			iBrokenLinks = iBrokenLinks + 1;		end;	end;		print("[Level] Restored "..iNumLinks.."/"..iNumLinks + iBrokenLinks.." entity links...");end;-- A function to call a hook for the level.function levels.CallHook(hookName, ...)	if (levels.m_active and levels.m_active[hookName]) then		local success, retVal = pcall(levels.m_active[hookName], levels.m_active, ...);				if (success) then			if (retVal ~= nil) then				return retVal;			end;		else			lua.Print(retVal);		end;	end;end;-- A function to get the level's textures.function levels.GetTextures()	return levels.m_textures;end;-- A function to draw the level's textures.function levels.DrawTextures()	for k, v in ipairs(levels.m_textures) do		draw.TiledImage(			v.image,			v.position.x,			v.position.y,			v.width,			v.height,			v.color,			v.tileSize		);	end;end;-- A function to update the level.function levels.Update(deltaTime)	decals.Update(deltaTime);	entities.Update(deltaTime);	effects.Update(deltaTime);	emitters.Update(deltaTime);	physics.Update(deltaTime);end;-- A function to draw the level.function levels.Draw()	local bDrawLighting = (hooks.Call("ShouldDrawLighting") ~= false);	local bDrawObjects = (hooks.Call("ShouldDrawObjects") ~= false);		render.StopBlending();		if (levels.m_active and levels.m_active.m_frameBuffer) then		levels.m_active.m_frameBuffer:StartCapture();	end;		camera.Begin();		levels.DrawTextures();		hooks.Call("PreDrawLighting");				if (bDrawObjects) then			decals.Draw();			entities.Draw();			effects.Draw();			emitters.Draw();						hooks.Call("DrawObjects");		end;				if (bDrawLighting) then			lighting.UpdateAndRender();		end;				hooks.Call("PostDrawLighting");	camera.Finish();		if (levels.m_active and levels.m_active.m_frameBuffer) then		levels.m_active.m_frameBuffer:StopCapture();		render.DrawTexture(			levels.m_active.m_frameBuffer:GetTexture(), 0, 0, display.GetW(), display.GetH(), Color(1, 1, 1, 1)		);				render.StartBlending();		render.SetBlendFunc(BLEND_SRC_ALPHA, BLEND_ONE);				levels.m_active.m_shader:Bind();			levels.m_active.m_shader:SetTexture("TexSample", levels.m_active.m_frameBuffer:GetTexture(), 0);			levels.m_active.m_frameBuffer:BindTexture();			levels.m_active.m_frameBuffer:DrawQuad();		levels.m_active.m_shader:Unbind();				render.StopBlending();	end;end;-- A function to unload the level.function levels.Unload()	entities.Clear(); emitters.Clear();	effects.Clear(); decals.Clear();		levels.m_textures = {};		if (levels.m_active) then		print("[Level] Unloading level "..levels.m_active.m_sLevelName.."...");				levels.m_active:OnUnload();				hooks.Call("LevelUnload", self.m_active);		levels.m_active = nil;	end;end;-- A function to get the active level.function levels.GetActive()	return levels.m_active;end;