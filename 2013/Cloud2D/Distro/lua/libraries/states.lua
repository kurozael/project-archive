--[[	© 2011-2012 CloudSixteen.com do not share, re-distribute or modify	this file without the permission of its owner(s).
	Conna Wiles (connawiles@gmail.com)--]]states = {};states.m_list = {};states.m_active = nil;-- A function to import a state.function states.Import(fileName)	local className = util.FileNameNoExt(fileName);	local stateTable = states.GetTable(className);		if (not stateTable) then		STATE = states.New(className == "BaseState");		STATE.m_sClassName = className;			lua.Include(fileName);		return states.Register(STATE);	else		return stateTable;	end;end;-- A function to get whether the current state is the editor.function states.IsEditor()	return (states.m_active and states.m_active.m_sClassName == "EditorStateNew");end;-- A function to set the active state.function states.SetActive(className)	local stateTable = states.GetTable(className);		if (stateTable) then		local activeState = states.GetActive();				if (activeState) then			activeState:OnUnload();						controls.Clear();			levels.Unload();			timers.Clear();		end;				states.m_active = stateTable;		states.m_active:OnLoad();				return states.m_active;	end;end;-- A function to call a hook for the state.function states.CallHook(hookName, ...)	if (states.m_active and states.m_active[hookName]) then		local success, retVal = pcall(states.m_active[hookName], states.m_active, ...);				if (success) then			if (retVal ~= nil) then				return retVal;			end;		else			lua.Print(retVal);		end;	end;end;-- A function to get the active state.function states.GetActive()	return states.m_active;end;-- A function to get a state table.function states.GetTable(className)	return states.m_list[className];end;-- A function to create a new entity.function states.New(bBaseObject)	if (not bBaseObject) then		local baseState = states.Import("states/BaseState");				if (baseState) then			local object = {};				setmetatable(object, baseState);				baseState.__index = baseState;			return object;		end;	else		return {};	end;end;-- A function to register an entity.function states.Register(stateTable)	states.m_list[stateTable.m_sClassName] = stateTable;	states.m_list[stateTable.m_sClassName]:__init();		return states.m_list[stateTable.m_sClassName];end;