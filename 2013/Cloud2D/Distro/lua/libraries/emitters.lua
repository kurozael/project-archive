--[[	© 2011-2012 CloudSixteen.com do not share, re-distribute or modify	this file without the permission of its owner(s).
	Conna Wiles (connawiles@gmail.com)--]]emitters = {};emitters.m_list = {};emitters.m_class = {};emitters.m_class.__index = emitters.m_class;emitters.m_particle = {};emitters.m_particle.__index = emitters.m_particle;-- Called when the emitter is constructed.function emitters.m_class:__init(position)	self.m_particles = {};	self.m_position = position;end;-- A function to add a particle to the emitter.function emitters.m_class:Add(fileName, origin)	local object = {};		setmetatable(object, emitters.m_particle);	self.m_particles[#self.m_particles + 1] = object;		object:__init(fileName, origin);		return object;end;-- A function to remove the emitter.function emitters.m_class:Remove()	self.m_particles = {};end;-- A function to dispatch the emitter.function emitters.m_class:Dispatch()	emitters.m_list[#emitters.m_list + 1] = self;		for k, v in pairs(self.m_particles) do		v.m_iStartAlpha = math.min(v.m_iStartAlpha, v.m_color.a);		v.m_position = self.m_position + v.m_origin;		v.m_iAlpha = v.m_iStartAlpha;		v.m_iSize = v.m_iStartSize;	end;end;-- Called when the particle is constructed.function emitters.m_particle:__init(fileName, origin)	self.m_image = util.GetImage(fileName);	self.m_color = Color(1, 1, 1, 1);	self.m_origin = origin;	self.m_position = Vec2(0, 0);	self.m_velocity = Vec2(0, 0);	self.m_iKillTime = 0;	self.m_iEndSize = 8;	self.m_iStartSize = 4;	self.m_iEndAlpha = 0;	self.m_iStartTime = time.CurTime();	self.m_iStartAlpha = 1;	self.m_fAirResistance = 0.1;end;util.AddAccessor(emitters.m_particle, "Color", "m_color");util.AddAccessor(emitters.m_particle, "Origin", "m_origin");util.AddAccessor(emitters.m_particle, "Velocity", "m_velocity");util.AddAccessor(emitters.m_particle, "KillTime", "m_iKillTime");util.AddAccessor(emitters.m_particle, "EndSize", "m_iEndSize");util.AddAccessor(emitters.m_particle, "StartSize", "m_iStartSize");util.AddAccessor(emitters.m_particle, "EndAlpha", "m_iEndAlpha");util.AddAccessor(emitters.m_particle, "StartAlpha", "m_iStartAlpha");util.AddAccessor(emitters.m_particle, "AirResistance", "m_fAirResistance");-- A function to get a new emitters.function emitters.New(position)	local object = {};		setmetatable(object, emitters.m_class);	object:__init(position);		return object;end;-- A function to clear the emitters.function emitters.Clear()	emitters.m_list = {};end;-- A function to update the emitters.function emitters.Update(deltaTime)	local curTime = time.CurTime();		for k, v in ipairs(emitters.m_list) do		for k2, v2 in ipairs(v.m_particles) do			local airResistance = math.Clamp(v2.m_fAirResistance, 0, 1);			local deceleration = 1 - airResistance;						v2.m_position.x = v2.m_position.x + (v2.m_velocity.x * deltaTime);			v2.m_position.y = v2.m_position.y + (v2.m_velocity.y * deltaTime);			v2.m_velocity.x = v2.m_velocity.x * deceleration;			v2.m_velocity.y = v2.m_velocity.y * deceleration;						if (v2.m_iKillTime > 0) then				local dieTime = v2.m_iStartTime + v2.m_iKillTime;				local timeLeft = (dieTime - curTime);								if (curTime < dieTime) then					v2.m_iSize = util.Transition(v2.m_iStartSize, v2.m_iEndSize, v2.m_iKillTime, timeLeft);					v2.m_iAlpha = util.Transition(v2.m_iStartAlpha, v2.m_iEndAlpha, v2.m_iKillTime, timeLeft);				else					table.remove(v.m_particles, k2);				end;			end;		end;				if (#v.m_particles == 0) then			table.remove(emitters.m_list, k);		end;	end;end;-- A function to draw the emitters.function emitters.Draw()	for k, v in ipairs(emitters.m_list) do		for k2, v2 in ipairs(v.m_particles) do			local color = Color(v2.m_color.r, v2.m_color.g, v2.m_color.b, v2.m_iAlpha);						render.DrawImage(				v2.m_image,				v2.m_position.x - (v2.m_iSize / 2),				v2.m_position.y - (v2.m_iSize / 2),				v2.m_iSize,				v2.m_iSize,				color			);		end;	end;end;