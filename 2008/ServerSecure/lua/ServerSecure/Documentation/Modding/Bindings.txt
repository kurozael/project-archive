// Information 

// Key

[CS] Means it can be used clientside
[SS] Means it can be used serverside
[BS] Means it can be used on both

// Points 

SS.Points.Gain(Player, Amount)
SS.Points.Deduct(Player, Amount)

// Meta 

[SS] Player:IsReady() (Used to check if a players values have been set)
[SS] Player:SetTextReturn() (Used on PlayerSay hooks will return nil for that one time)
[SS] Player:HideGUI(Type, Bool) (Enable or disable GUI elements for a player)
[SS] Player:SetControllingEntity(Entity) (Set a players entity that he controlling, a shorter SetNetworkedEntity)
[BS] Player:GetControllingEntity() (Get a players entity that he is controlling, a shorter GetNetworkedEntity)
[SS] Player:RemoveWhenKilled(Entity) (Delete an entity when a player dies)
[SS] Player:TraceLine() (Returns trace from player)
[SS] Player:PlaySound(Sound) (Play a sound on the client)

// Select 

[SS] Player:EntitiesSelected() (Get selected entities that a player currently has)
[SS] Player:DeselectEntities() (Deselect all of a players currently selected props)

// Config 

[SS] SS.Config.New(ID, ...) (Create a new config variable, can be used to update a previous one)
[SS] SS.Config.Request(ID) (Get a new config variable)

// Clientside only 

[CS] SS.Config.Request(ID) (Returns a config variable from the server, returns as a string)
[CS] SS.Part.Add(ID, Type) (Add a part to the GUI)

// Flags 

[SS] SS.Flags.PlayerHas(Player, Flag) (Returns true if player has flag)
[SS] SS.Flags.PlayerGive(Player, Flag) (Give player a flag, returns false if player has it already)
[SS] SS.Flags.Branch(Tree, Flag) (Branch a flag to a flag tree)
[SS] SS.Flags.PlayerTake(Player, Flag) (Take flag from player, returns false if player doesn't have it)
[SS] SS.Flags.Free(Player, Bool) (Give free flags to players don't call this)

// Lib 

[SS] SS.Lib.ConCommand(Command, Args, Args, ETC, ETC) (Unlimited arguments allowed)
[SS] SS.Lib.FolderSearch(Location, Extension) (Include all files in folders in a folder)
[SS] SS.Lib.FileInclude(Location, Extension) (Include all files in a folder)
[SS] SS.Lib.Error(Text) (Print an error to the console)
[SS] SS.Lib.CreateSmokeTrail(Entity, Col) (Make a trail on entity, Col = {"R G B", "R G B"})
[SS] SS.Lib.StringBoolean(String) (Convert string or number to boolean)
[SS] SS.Lib.StringChop(String, Amount) (Cut a string into pieces and return a table)
[SS] SS.Lib.EntityExplode(Entity) (Explode an entity)
[SS] SS.Lib.StringExplode(String, Seperator) (Enhanced string.Explode)
[SS] SS.Lib.StringNumber(Number) (Convert string to number, returns nil if cannot convert)
[SS] SS.Lib.StringColor(String, Bool) (Converts a string like "100, 200, 100, 255" to a color, if not Bool then returns table)
[SS] SS.Lib.PlayersConnected() (Get amount of players connected)
[SS] SS.Lib.RandomTableEntry(Table) (Get random entry from table)
[SS] SS.Lib.Find(String) (Search through all players for matching string in name and return player object)
[SS] SS.Lib.FileInclude(Folder, Extension) (Include all files in a folder)
[SS] SS.Lib.FolderSearch(Folder, Extension) (Include all files in folders in a folder)
[SS] SS.Lib.ConCommand(Key, ...) (Run a console command like SS.Lib.ConCommand("banid", "0", "1", "kick"))
[SS] SS.Lib.PlayerKick(Person, Reason) (Kick a player, Player is the person who kicked him)
[SS] SS.Lib.PlayerBan(Person, Time) (Ban a player, Player is the person who banned him)
[SS] SS.Lib.PlayerSlay(Person) (Slay a player, Player is the person who slayed him)
[SS] SS.Lib.PlayerFreeze(Person, Bool) (Freeze a player, Player is the person who froze him)
[SS] SS.Lib.PlayerBlind(Person, Bool) (Blind a player, Player is the person who blinded him)
[SS] SS.Lib.PlayerGod(Person, Bool) (God a player, Player is the person who godded him)
[SS] SS.Lib.PlayerInvis(Person, Bool) (Make a player invisible, Player is the person who made him invisible)
[SS] SS.Lib.StringReplace(Text, Capital, Higher, Amount) (string.Replace but can specify how many times to do)
[SS] SS.Lib.Valid(Entity) (Better IsValid check)
[SS] SS.Lib.StringValue(String) (Format string so if it can be a number then convert to number, if it's "true" then make it true etc)
[SS] SS.Lib.StringRandom(Characters) (Returns a random string of a certain amount of characters)

// Useful 

[SS] SS.Clientside.Folder(Location, Extension) (Add and include all clientside files in a folder)