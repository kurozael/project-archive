--[[	© 2011 CloudSixteen.com do not share, re-distribute or modify	this file without the permission of its owner(s).--]]-- Called when the control is constructed.function CONTROL:__init(arguments)	self.m_bInvalidating = false;	self.m_bMouseInside = false;	self.m_bClickable = true;	self.m_bIsVisible = true;	self.m_bInvalid = false;	self.m_sToolTip = nil;	self.m_children = {};	self.m_iHeight = 0;	self.m_iWidth = 0;	self.m_color = Color(1, 1, 1, 1);	self.m_iX = 0;	self.m_iY = 0;		self:OnInitialize(arguments);end;-- Called when the control is updated.function CONTROL:__update(deltaTime)	self:DoMouseInsideCheck();	self:OnUpdate(deltaTime);end;-- Called when the control is removed.function CONTROL:__remove()	self:OnRemove();end;-- Called when the control is drawn.function CONTROL:__draw()	self:OnDraw();end;-- Called when the control has initialized.function CONTROL:OnInitialize(arguments) end;-- Called every frame for the control.function CONTROL:OnUpdate(deltaTime) end;-- Called when the control is removed.function CONTROL:OnRemove() end;-- Called when the control is drawn.function CONTROL:OnDraw() end;-- Called when the size of the control is based on it's contents.function CONTROL:OnSizeToContents()	return self.m_iWidth, self.m_iHeight;end;-- Called when the control's clip bounds are needed.function CONTROL:OnGetClipBoundries() end;-- Called when the control's layout is performed.function CONTROL:OnPerformLayout() end;-- Called when a mouse button is double clicked.function CONTROL:OnMouseButtonDoubleClick(button, x, y) end;-- Called when a mouse button is released.function CONTROL:OnMouseButtonRelease(button, x, y) end;-- Called when a mouse button  is pressed.function CONTROL:OnMouseButtonPress(button, x, y) end;-- Called when a key is released.function CONTROL:OnKeyRelease(key) end;-- Called when a key is pressed.function CONTROL:OnKeyPress(key) end;-- Called when the mouse leaves the control.function CONTROL:OnMouseLeave(x, y) end;-- Called when the mouse enters the control.function CONTROL:OnMouseEnter(x, y) end;-- Called when the control loses focus.function CONTROL:OnLoseFocus() end;-- Called when the control gets focus.function CONTROL:OnGetFocus() end;-- A function to check whether the mouse is inside the control.function CONTROL:DoMouseInsideCheck()	local mousePos = util.GetMousePos();	local control = controls.GetAtPos(		nil, mousePos.x, mousePos.y	);		if ( control and (control == self	or control:GetParent() == self) ) then		if (not self.m_bMouseInside) then			self.m_bMouseInside = true;			self:OnMouseEnter(mousePos.x, mousePos.y);		end;	elseif (self.m_bMouseInside) then		self.m_bMouseInside = false;		self:OnMouseLeave(mousePos.x, mousePos.y);	end;end;-- A function to check whether a position is inside the control.function CONTROL:IsPosInside(x, y)	local thisX, thisY = self:GetPos();		if (x > thisX and y > thisY and x < thisX + self:GetW() and y < thisY + self:GetH() ) then		return true;	end;		return false;end;-- A function to move the control right of another control.function CONTROL:MoveRightOf(control, spacing)	self:SetPos( control:GetX() + control:GetW() + (spacing or 0), self:GetY() );end;-- A function to move the control left of another control.function CONTROL:MoveLeftOf(control, spacing)	self:SetPos( control:GetX() - self:GetW() - (spacing or 0), self:GetY() );end;-- A function to align the control vertically with another control.function CONTROL:AlignWithVertically(control)	self:SetPos( self:GetX(), control:GetY() );end;-- A function to stretch the control to the size of it's parent.function CONTROL:StretchToParent(left, top, right, bottom)	local width = g_Display:GetW();	local height = g_Display:GetH();	local parent = self:GetParent();		if (parent) then		width, height = parent:GetSize();	end;		self:SetPos(left, top);	self:SetSize(width - right - left, height - bottom - left);end;-- A function to set the size of the control based on it's contents.function CONTROL:SizeToContents()	self:SetSize( self:OnSizeToContents() );end;-- A function to get the control's base class.function CONTROL:BaseClass()	return controls.GetTable(self.m_sBaseClass);end;-- A function to get the control's top parent.function CONTROL:GetTopParent()	local parent = self:GetParent();		if (parent) then		return parent:GetTopParent();	else		return self;	end;end;-- A function to set the control's tool tip.function CONTROL:SetToolTip(toolTip)	self.m_sToolTip = toolTip;end;-- A function to get the control's tool tip.function CONTROL:GetToolTip()	return self.m_sToolTip;end;-- A function to get the control's bounds.function CONTROL:GetBounds(relative)	return self:GetX(relative), self:GetY(relative), self:GetW(), self:GetH();end;-- A function to set the control's clip.function CONTROL:SetClip(bActive)	local graphics = g_Display:Graphics();		if (not bActive) then		graphics:PopClipRect();		return;	end;		local clipBounds = self:OnGetClipBoundries();	local parent = self:GetParent();		if (not clipBounds and parent) then		local x, y, w, h = parent:GetBounds();		clipBounds = {x = x, y = y, w = w, h = h};	end;		if (clipBounds) then		graphics:PushClipRect( Rect(			clipBounds.x, clipBounds.y,			clipBounds.x + clipBounds.w,			clipBounds.y + clipBounds.h		) );	end;end;-- A function to set the control's position.function CONTROL:SetPos(x, y)	self.m_iX = x; self.m_iY = y;end;-- A function to get the control's position.function CONTROL:GetPos(bRelative)	local parent = self:GetParent();		if (bRelative or not parent) then		return self.m_iX, self.m_iY;	else		local pX, pY = parent:GetPos();		local sX, sY = self:GetPos(true);				return pX + sX, pY + sY;	end;end;-- A function to get the control's children.function CONTROL:GetChildren()	return self.m_children;end;-- A function to set whether the control is visible.function CONTROL:SetVisible(visible)	self.m_bIsVisible = visible;end;-- A function to get whether the control is visible.function CONTROL:IsVisible()	local parent = self:GetParent();		if ( parent and not parent:IsVisible() ) then		return false;	else		return self.m_bIsVisible;	end;end;-- A function to set whether the control is focused.function CONTROL:SetFocused(bFocused)	local isFocused = self:IsFocused();		if (isFocused and not bFocused) then		controls.SetFocused(nil);	elseif (not isFocused and bFocused) then		controls.SetFocused(self);	end;end;-- A function to get whether the control is focused.function CONTROL:IsFocused()	return (controls.GetFocused() == self);end;-- A function to set the control's parent.function CONTROL:SetParent(control)	self:SetPos( self:GetPos(true) );		local parent = self:GetParent();	local allControls = controls.GetAll();		if (parent) then		local children = parent:GetChildren();				for k, v in ipairs(children) do			if (v == self) then				table.remove(children, k);				break;			end;		end;	end;		if ( control and control:IsValid() ) then		self.m_parent = control;				local children = control:GetChildren();		children[#children + 1] = self;				for k, v in ipairs(allControls) do			if (v == self) then				table.remove(allControls, k);			end;		end;	else		allControls[#allControls + 1] = self;	end;end;-- A function to invalidate the control's layout.function CONTROL:InvalidateLayout()	if (self.m_bInvalidating) then		return;	end;		self.m_bInvalidating = true;		self:OnPerformLayout();	self.m_bInvalidating = false;end;-- A function to get the control's parent.function CONTROL:GetParent()	if ( self.m_parent and self.m_parent:IsValid() ) then		return self.m_parent;	end;end;-- A function to set the height of the control.function CONTROL:SetHeight(height)	self:SetSize(self:GetW(), height);end;-- A function to get the height of the control.function CONTROL:GetH()	return self.m_iHeight;end;-- A function to set the width of the control.function CONTROL:SetWidth(width)	self:SetSize( width, self:GetH() );end;-- A function to get the width of the control.function CONTROL:GetW()	return self.m_iWidth;end;-- A function to check whether the control is valid.function CONTROL:IsValid()	return (not self.m_bInvalid);end;-- A function to set the color of the control.function CONTROL:SetColor(color)	self.m_color.r = color.r;	self.m_color.g = color.g;	self.m_color.b = color.b;	self.m_color.a = color.a;end-- A function to get the color of the control.function CONTROL:GetColor(bUnpacked)	if (bUnpacked) then		return self.m_color.r, self.m_color.g, self.m_color.b, self.m_color.a;	else		return self.m_color;	end;end;-- A function to set the control's size.function CONTROL:SetSize(width, height)	local invalidateLayout = false;		if (self.m_iWidth ~= width	or self.m_iHeight ~= height) then		invalidateLayout = true;	end;		self.m_iWidth = width;	self.m_iHeight = height;		if (invalidateLayout) then		self:InvalidateLayout();	end;end;-- A function to get the control's size.function CONTROL:GetSize()	return self.m_iWidth, self.m_iHeight;end;-- A function to call a hook on the control and it's children.function CONTROL:CallHook(hook, ...)	if ( not self:IsValid() ) then return; end;		if (hook == "__draw") then		local children = self:GetChildren();				if ( self:IsVisible() ) then			self:SetClip(true);						if ( self[hook] ) then				self[hook](self, ...);			end;						for k, v in ipairs(children) do				if ( v:IsValid() ) then					v:CallHook(hook, ...);				end;			end;						self:SetClip(false);		end;	else		local children = self:GetChildren();				if ( self[hook] ) then			self[hook](self, ...);		end;				for k, v in ipairs(children) do			if ( v:IsValid() ) then				v:CallHook(hook, ...);			end;		end;	end;end;-- A function to get the control's class.function CONTROL:GetClass()	return self.m_sClassName;end;-- A function to Remove the control.function CONTROL:Remove()	controls.Remove(self);end;-- A function to set the x position of the control.function CONTROL:SetX(x)	self.m_iX = x;end;-- A function to set the y position of the control.function CONTROL:SetY(y)	self.m_iY = y;end;-- A function to get the x position of the control.function CONTROL:GetX(bRelative)	local x, y = self:GetPos(bRelative);	return x;end;-- A function to get the y position of the control.function CONTROL:GetY(bRelative)	local x, y = self:GetPos(bRelative);	return y;end;util.AddAccessor(CONTROL, "Clickable", "m_bClickable");