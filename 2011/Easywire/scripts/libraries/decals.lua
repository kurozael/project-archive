--[[	© 2011 CloudSixteen.com do not share, re-distribute or modify	this file without the permission of its owner(s).--]]decals = {};decals.m_list = {};decals.m_types = {};-- A function to add a decal type.function decals.AddType(typeName, materials)	local decalTable = decals.m_types[typeName];		if (type(materials) ~= "table") then		materials = {materials};	end;		if (not decalTable) then		for k, v in ipairs(materials) do			materials[k] = util.GetImage(v);		end;				decals.m_types[typeName] = materials;	else		for k, v in ipairs(materials) do			decalTable[#decalTable + 1] = util.GetImage(v);		end;	end;end;-- A function to get a decal by type.function decals.GetByType(typeName)	local decalTable = decals.m_types[typeName];		if (decalTable) then		return decalTable[ math.random(1, #decalTable) ];	else		return util.GetImage(typeName);	end;end;-- A function to create a decal.function decals.Create(typeName, position, width, height, color, fadeTime)	if (not color) then		color = Color(1, 1, 1, 1);	end;		position.x = position.x - (width / 2);	position.y = position.y - (height / 2);		decals.m_list[#decals.m_list + 1] = {		shouldFade = (fadeTime ~= nil),		timeToFade = g_Time:CurTime() + fadeTime,		position = position,		image = decals.GetByType(typeName),		height = height,		width = width,		alpha = color.a,		color = color	};		if (#decals.m_list == 64) then		table.remove(decals.m_list, 1);	end;end;-- A function to clear the decals.function decals.Clear()	decals.m_list = {};end;-- A function to update the decals.function decals.Update(deltaTime)	local curTime = g_Time:CurTime();		for k, v in ipairs(decals.m_list) do		if (v.shouldFade and curTime >= v.timeToFade) then			local difference = math.min(curTime - v.timeToFade, 10);			v.alpha = v.color.a - ( (v.color.a / 10) * difference );						if (v.alpha == 0) then				table.remove(decals.m_list, k);			end;		end;	end;end;-- A function to draw the decals.function decals.Draw()	for k, v in pairs(decals.m_list) do		local color = Color(v.color.r, v.color.g, v.color.b, v.alpha);				g_Render:DrawImage(			v.image,			v.position.x,			v.position.y,			v.width or v.image:GetW(),			v.height or v.image:GetH(),			color		);	end;end;