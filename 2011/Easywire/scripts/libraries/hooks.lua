--[[	© 2011 CloudSixteen.com do not share, re-distribute or modify	this file without the permission of its owner(s).--]]hooks = {};hooks.m_list = {};hooks.m_module = {};-- A function to add a hook.function hooks.Add(hookName, uniqueID, callback)	hooks.m_list[hookName] = hooks.m_list[hookName] or {};	hooks.m_list[hookName][uniqueID] = callback;end;-- A function to remove a hook.function hooks.Remove(hookName, uniqueID)	if ( hooks.m_list[hookName] and hooks.m_list[hookName][uniqueID] ) then		hooks.m_list[hookName][uniqueID] = nil;	end;end;-- A function to call a hook.function hooks.Call(hookName, ...)	local hookTable = hooks.m_list[hookName];		if (hookTable ~= nil) then		for k, v in pairs(hookTable) do			local success, retVal = pcall(v, ...);						if (success) then				if (retVal ~= nil) then					return retVal;				end;			else				g_Lua:Print(retVal);			end;		end;	end;		local retVal = states.CallHook(hookName, ...);	if (retVal ~= nil) then return retVal; end;		retVal = levels.CallHook(hookName, ...);	if (retVal ~= nil) then return retVal; end;		retVal = tools.CallHook(hookName, ...);	if (retVal ~= nil) then return retVal; end;end;