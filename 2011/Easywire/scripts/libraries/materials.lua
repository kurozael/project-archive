--[[	© 2011 CloudSixteen.com do not share, re-distribute or modify	this file without the permission of its owner(s).--]]materials = {};materials.m_list = {};materials.m_types = {};materials.m_class = {};materials.m_class.__index = materials.m_class;-- A function to get an array as a vector.function materials.m_class:GetVector(key)	local value = self[key];		if (type(value) == "table") then		local x = (type( value[1] ) == "number" and value[1] or 0);		local y = (type( value[2] ) == "number" and value[2] or 0);				return Vec2(x, y);	end;end;-- A function to get an array as a color.function materials.m_class:GetColor(key)	local value = self[key];		if (type(value) == "table") then		local r = (type( value[1] ) == "number" and value[1] or 1);		local g = (type( value[2] ) == "number" and value[2] or 1);		local g = (type( value[2] ) == "number" and value[2] or 1);		local a = (type( value[4] ) == "number" and value[4] or 1);				return Color(r, g, b, a);	end;end;-- A function to get the material's type.function materials.m_class:GetType()	return materials.GetType(self.type);end;-- A function to load a material's data.function materials.LoadData(fileName)	fileName = util.FixFilePath(fileName, "materials/", ".png");		if ( not materials.m_list[fileName] ) then		local realFileName = g_Files:GetName(fileName);		local extension = g_Files:GetExt(fileName);		local realName = string.sub( realFileName, 0, string.len(realFileName) - (string.len(extension) + 1) );		local filePath = string.sub( fileName, 0, string.len(fileName) - string.len(realFileName) );		local matFile = nil;				if ( g_Files:Exists(filePath..realName..".cmf") ) then			matFile = filePath..realName..".cmf";		elseif ( g_Files:Exists(filePath.."all.cmf") ) then			matFile = filePath.."all.cmf";		end;				if (matFile) then			local data = util.KeyValuesToTable( g_Files:Read(matFile) );						if ( data and data["Material Data"] ) then				materials.m_list[fileName] = data["Material Data"];				setmetatable(materials.m_list[fileName], materials.m_class);			end;		else			materials.m_list[fileName] = {};			setmetatable(materials.m_list[fileName], materials.m_class);		end;	end;end;-- A function to get a material's data.function materials.GetData(fileName)	fileName = util.FixFilePath(fileName, "materials/", ".png");		if ( not materials.m_list[fileName] ) then		materials.LoadData(fileName);	end;		return materials.m_list[fileName];end;-- A function to add a material type.function materials.AddType(typeName, enumValue)	materials.m_types[typeName] = enumValue;end;-- A function to get a material type.function materials.GetType(typeName)	return materials.m_types[typeName] or MAT_GENERIC;end;-- A function to get whether a material type is valid.function materials.IsValidType(typeName)	return (materials.m_types[typeName] ~= nil);end;--[[	This is a good place to add all new material types.--]]materials.AddType("Concrete", MAT_CONCRETE);materials.AddType("Liquid", MAT_LIQUID);materials.AddType("Brick", MAT_BRICK);materials.AddType("Flesh", MAT_FLESH);materials.AddType("Earth", MAT_EARTH);materials.AddType("Metal", MAT_METAL);materials.AddType("Glass", MAT_GLASS);materials.AddType("Tile", MAT_TILE);materials.AddType("Wood", MAT_WOOD);