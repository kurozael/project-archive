--[[	© 2011 CloudSixteen.com do not share, re-distribute or modify	this file without the permission of its owner(s).--]]chips = {};chips.m_classes = {};-- A function to import an chip.function chips.Import(fileName)	local className = util.FileNameNoExt(fileName);	local chipTable = chips.GetTable(className);		if (not chipTable) then		CHIP = chips.New(className == "BaseChip");		CHIP.m_sClassName = className;			g_Lua:LoadScript(fileName);		return chips.Register(CHIP);	else		return chipTable;	end;end;-- A function to create a new chip.function chips.Create(className, ...)	local chip = chips.GetCopy(className);		chip:__init( {...} );	return chip;end;-- A function to get a chip by name.function chips.GetByName(chipName)	for k, v in pairs(chips.m_classes) do		if (v.m_sName == chipName) then			return v;		end;	end;end;-- A function to get an chip table.function chips.GetTable(className)	return chips.m_classes[className];end;-- A function to get a copy of an chip table.function chips.GetCopy(className)	return table.CreateCopy( chips.m_classes[className] );end;-- A function to derive an chip from its bases.function chips.Derive(className, baseClass, derivatives)	local chipTable = chips.GetTable(className);		if (not derivatives) then derivatives = {}; end;	if (not chipTable) then return baseClass; end;		if ( not derivatives[className] ) then		derivatives[className] = className;	end;		if (not baseClass) then		if (not chipTable.m_sBaseClass) then			local chip = table.CreateCopy(chipTable);				chip.m_derivatives = derivatives;			return chip;		else			baseClass = table.CreateCopy(chipTable);			baseClass.m_derivatives = derivatives;		end;	end;		if (chipTable.m_sBaseClass) then		chips.Derive(			chipTable.m_sBaseClass,			baseClass,			derivatives		);	end;		table.MergeWith(baseClass, chipTable);		return baseClass;end;-- A function to setup chip inheritance.function chips.SetupInheritance()	local classes = {};		for k, v in pairs(chips.m_classes) do			classes[k] = chips.Derive(k);		end;	chips.m_classes = classes;end;-- A function to get the chip classes.function chips.GetClasses()	return chips.m_classes;end;-- A function to create a new chip.function chips.New(bBaseObject)	if (not bBaseObject) then		local baseChip = chips.Import("chips/BaseChip");				if (baseChip) then			local object = {};				setmetatable(object, baseChip);				baseChip.__index = baseChip;			return object;		end;	else		return {};	end;end;-- A function to register an chip.function chips.Register(chipTable)	local className = chipTable.m_sClassName;		chips.m_classes[className] = chipTable;	return chips.m_classes[className];end;