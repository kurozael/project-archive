--[[	© 2011 CloudSixteen.com do not share, re-distribute or modify	this file without the permission of its owner(s).--]]tools = {};tools.m_list = {};tools.m_class = {};tools.m_class.__index = tools.m_class;-- Called when the tool is constructed.function tools.m_class:__init() end;-- Called when the tool has become inactive.function tools.m_class:OnInactive() end;-- Called when the tool has become active.function tools.m_class:OnActive() end;-- A function to get the tool's class.function tools.m_class:GetClass()	return self.m_sClassName;end;-- A function to get the tool's editor.function tools.m_class:GetEditor()	return states.GetTable("EditorState");end;-- A function to import a tool.function tools.Import(fileName)	TOOL = tools.New();	TOOL.m_sClassName = util.FileNameNoExt(fileName);		g_Lua:LoadScript(fileName);	return tools.Register(TOOL);end;-- A function to call a hook for the tool.function tools.CallHook(hookName, ...)	if ( tools.m_active and tools.m_active[hookName] ) then		local success, retVal = pcall(tools.m_active[hookName], tools.m_active, ...);				if (success) then			if (retVal ~= nil) then				return retVal;			end;		else			g_Lua:Print(retVal);		end;	end;end;-- A function to set the active tool.function tools.SetActive(className)	if (tools.m_active) then		tools.m_active:OnInactive();		tools.m_active = nil;	end;		if (className) then		tools.m_active = tools.m_list[className];		tools.m_active:OnActive();	end;end;-- A function to get the active tool.function tools.GetActive()	return tools.m_active;end;-- A function to get all tools.function tools.GetAll()	return tools.m_list;end;-- A function to create a new tool.function tools.New()	local object = {};		setmetatable(object, tools.m_class);	object:__init();		return object;end;-- A function to register an tool.function tools.Register(toolTable)	tools.m_list[toolTable.m_sClassName] = toolTable;	return tools.m_list[toolTable.m_sClassName];end;