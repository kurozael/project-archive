--[[	© 2011 CloudSixteen.com do not share, re-distribute or modify	this file without the permission of its owner(s).--]]entities = {};entities.m_iIndex = 0;entities.m_classes = {};entities.m_spawned = {	iterator = {},	entIndex = {},	className = {}};entities.m_deletion = {};entities.m_safeCalls = {};-- An internal function to remove a spawned entity.local function RemoveSpawnedEntity(entity)	local entIndex = entity:EntIndex();	local className = entity:GetClass();	local tabIterator = entities.m_spawned["iterator"];	local tabEntIndex = entities.m_spawned["entIndex"];	local tabClassName = entities.m_spawned["className"];		for k, v in ipairs( tabClassName[className] ) do		if (entity == v) then			table.remove(tabClassName[className], k);			break;		end;	end;		for k, v in ipairs(tabIterator) do		if (entity == v) then			table.remove(tabIterator, k);			break;		end;	end;		local physBody = entity:GetPhysBody();		if (physBody) then		physBody:Destroy();	end;		tabEntIndex[entIndex] = nil;end;-- A function to update the draw layers.function entities.UpdateDrawLayers()	entities.m_bUpdateDrawLayers = true;end;-- A function to sort the draw layers.function entities.SortDrawLayers()	table.sort(entities.m_spawned["iterator"], function(a, b)		return a.m_iDrawLayer < b.m_iDrawLayer;	end);end;-- A function to flag an entity as spawned.function entities.FlagAsSpawned(entity)	if ( not entity:HasFlag(FLAG_SPAWNED) ) then		local entIndex = entity:EntIndex();		local className = entity:GetClass();		local tabIterator = entities.m_spawned["iterator"];		local tabEntIndex = entities.m_spawned["entIndex"];		local tabClassName = entities.m_spawned["className"];				tabEntIndex[entIndex] = entity;			tabIterator[#tabIterator + 1] = entity;			tabClassName[className][#tabClassName[className] + 1] = entity;		entity:GiveFlag(FLAG_SPAWNED);				entities.UpdateDrawLayers();	end;end;-- A function to import an entity.function entities.Import(fileName)	local className = util.FileNameNoExt(fileName);	local entityTable = entities.GetTable(className);		if (not entityTable) then		ENTITY = entities.New(className == "BaseEntity");		ENTITY.m_sClassName = className;			g_Lua:LoadScript(fileName);		return entities.Register(ENTITY);	else		return entityTable;	end;end;-- A function to get entities by class name.function entities.GetByClassName(className)	return entities.m_spawned["className"][className];end;-- A function to get the entity count.function entities.GetCount()	return #entities.m_spawned["iterator"];end;-- A function to get the player entity.function entities.GetPlayer()	if ( entities.m_player and entities.m_player:IsValid() ) then		return entities.m_player;	end;end;-- A function to set the player entity.function entities.SetPlayer(entity)	entities.m_player = entity;end;-- A function to create a new entity.function entities.Create(className, ...)	local entIndex = entities.m_iIndex;	local entity = entities.GetCopy(className);		entity.m_iEntIndex = entIndex;		entity:__init( {...} );	entities.m_iIndex = entities.m_iIndex + 1;		return entity;end;-- A function to remove an entity.function entities.Remove(entity)	if ( entity and entity:IsValid() ) then		entities.m_deletion[#entities.m_deletion + 1] = entity;		entity.m_bInvalid = true;	end;end;-- A function to clear the entities.function entities.Clear()	for k, v in ipairs( entities.m_spawned["iterator"] ) do		RemoveSpawnedEntity(v);		v:__remove();	end;		entities.m_deletion = {};end;-- A function to update the entities.function entities.Update(deltaTime)	for k, v in ipairs( entities.m_spawned["iterator"] ) do		if ( v:IsValid() ) then			v:__update(deltaTime);		end;	end;		for k, v in ipairs(entities.m_deletion) do		table.remove(entities.m_deletion, k);		RemoveSpawnedEntity(v);		v:__remove();	end;		for k, v in ipairs(entities.m_safeCalls) do		v(); table.remove(entities.m_safeCalls, k);	end;		if (entities.m_bUpdateDrawLayers) then		entities.m_bUpdateDrawLayers = nil;		entities.SortDrawLayers();	end;end;-- A function to draw the entities.function entities.Draw()	for k, v in ipairs( entities.m_spawned["iterator"] ) do		if ( v:IsValid() ) then			v:__draw();		end;	end;end;-- A function to get all spawned entities.function entities.GetAll()	return entities.m_spawned["iterator"];end;-- A function to get an entity table.function entities.GetTable(className)	return entities.m_classes[className];end;-- A function to get a copy of an entity table.function entities.GetCopy(className)	return table.CreateCopy( entities.m_classes[className] );end;-- A function to get an entity by its index.function entities.GetByIndex(entIndex)	return entities.m_spawned["entIndex"][entIndex];end;-- A function to get entities by their team.function entities.GetByTeam(team)	local entityList = {};		for k, v in ipairs( entities.m_spawned["iterator"] ) do		if (v:GetTeam() == team) then			entityList[#entityList + 1] = v;		end;	end;		return entityList;end;-- A function to get whether an entity is valid.function entities.IsValid(entity)	if ( entity and type(entity) == "table" and type(entity.IsValid) == "function"	and entity:IsValid() ) then		return true;	end;		return false;end;-- A function to derive an entity from its bases.function entities.Derive(className, baseClass, derivatives)	local entityTable = entities.GetTable(className);		if (not derivatives) then derivatives = {}; end;	if (not entityTable) then return baseClass; end;		if ( not derivatives[className] ) then		derivatives[className] = className;	end;		if (not baseClass) then		if (not entityTable.m_sBaseClass) then			local entity = table.CreateCopy(entityTable);				entity.m_derivatives = derivatives;			return entity;		else			baseClass = table.CreateCopy(entityTable);			baseClass.m_derivatives = derivatives;		end;	end;		if (entityTable.m_sBaseClass) then		entities.Derive(			entityTable.m_sBaseClass,			baseClass,			derivatives		);	end;		table.MergeWith(baseClass, entityTable);		return baseClass;end;-- A function to setup entity inheritance.function entities.SetupInheritance()	local classes = {};		for k, v in pairs(entities.m_classes) do			classes[k] = entities.Derive(k);		end;	entities.m_classes = classes;end;-- A function to get the entity classes.function entities.GetClasses()	return entities.m_classes;end;-- A function to add a safe entity call.function entities.Safe(Callback)	entities.m_safeCalls[#entities.m_safeCalls + 1] = Callback;end;-- A function to create a new entity.function entities.New(bBaseObject)	if (not bBaseObject) then		local baseEntity = entities.Import("entities/BaseEntity");				if (baseEntity) then			local object = {};				setmetatable(object, baseEntity);				baseEntity.__index = baseEntity;			return object;		end;	else		return {};	end;end;-- A function to register an entity.function entities.Register(entityTable)	local className = entityTable.m_sClassName;		entities.m_classes[className] = entityTable;		entities.m_spawned["className"][className] = {};	return entities.m_classes[className];end;